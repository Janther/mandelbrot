{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","scale","Math","min","useState","base","setBase","multiplier","setMultiplier","connections","setConnections","getXY","useCallback","angle","x","cos","canvasWidth","y","sin","canvasHeight","pointFactory","PI","useEffect","newConnections","i","push","p1","p2","className","width","height","style","border","map","line","x2","y2","x1","y1","stroke-width","stroke","key","type","value","onChange","e","parseInt","target","step","parseFloat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kKAqEeA,MAnEf,WACE,IAEMC,EAAQC,KAAKC,IAFE,IACD,KACgC,IAHvC,EAKSC,mBAAS,IALlB,mBAKRC,EALQ,KAKFC,EALE,OAMqBF,mBAAS,GAN9B,mBAMRG,EANQ,KAMIC,EANJ,OAOuBJ,mBAAS,IAPhC,mBAORK,EAPQ,KAOKC,EAPL,KASPC,EAAQC,uBACZ,SAAAC,GAAK,MAAK,CACRC,EAAGZ,KAAKa,IAAIF,GAASZ,EAAQe,IAC7BC,EAAGf,KAAKgB,IAAIL,GAASZ,EAAQkB,OAE/B,CAAClB,EAZiB,IADC,MAgBfmB,EAAeR,uBACnB,SAACE,EAAGT,GAAJ,OAAaM,EAAOG,EAAIT,EAAQ,EAAIH,KAAKmB,MACzC,CAACV,IAcH,OAXAW,qBAAU,WAER,IADA,IAAIC,EAAiB,GACZC,EAAI,EAAGA,EAAInB,EAAMmB,IACxBD,EAAeE,KAAK,CAClBC,GAAIN,EAAaI,EAAI,EAAGnB,GACxBsB,GAAIP,GAAcI,EAAI,GAAKjB,EAAYF,KAG3CK,EAAea,KACd,CAAChB,EAAYF,EAAMJ,EAAOmB,IAG3B,yBAAKQ,UAAU,OACb,yBACEC,MAlCc,IAmCdC,OApCe,IAqCfC,MAAO,CAAEC,OAAQ,qBAEhBvB,EAAYwB,KAAI,SAACC,EAAMV,GAAP,OACf,0BACEW,GAAID,EAAKP,GAAGb,EACZsB,GAAIF,EAAKP,GAAGV,EACZoB,GAAIH,EAAKR,GAAGZ,EACZwB,GAAIJ,EAAKR,GAAGT,EACZsB,eAAa,IACbC,OAAO,QACPC,IAAKjB,QAIX,2BACEkB,KAAK,SACLC,MAAOtC,EACPuC,SAAU,SAAAC,GAAC,OAAIvC,EAAQwC,SAASD,EAAEE,OAAOJ,WAE3C,2BACED,KAAK,SACLC,MAAOpC,EACPyC,KAAK,KACLJ,SAAU,SAAAC,GAAC,OAAIrC,EAAcyC,WAAWJ,EAAEE,OAAOJ,aCnDrCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.daf5ba9a.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\nfunction App() {\n  const canvasHeight = 800;\n  const canvasWidth = 1000;\n  const scale = Math.min(canvasHeight, canvasWidth) / 2.5;\n\n  let [base, setBase] = useState(10);\n  let [multiplier, setMultiplier] = useState(2);\n  let [connections, setConnections] = useState([]);\n\n  const getXY = useCallback(\n    angle => ({\n      x: Math.cos(angle) * scale + canvasWidth / 2,\n      y: Math.sin(angle) * scale + canvasHeight / 2\n    }),\n    [scale, canvasWidth, canvasHeight]\n  );\n\n  const pointFactory = useCallback(\n    (x, base) => getXY((x / base) * 2 * Math.PI),\n    [getXY]\n  );\n\n  useEffect(() => {\n    let newConnections = [];\n    for (let i = 0; i < base; i++) {\n      newConnections.push({\n        p1: pointFactory(i + 1, base),\n        p2: pointFactory((i + 1) * multiplier, base)\n      });\n    }\n    setConnections(newConnections);\n  }, [multiplier, base, scale, pointFactory]);\n\n  return (\n    <div className=\"App\">\n      <svg\n        width={canvasWidth}\n        height={canvasHeight}\n        style={{ border: \"1px solid black;\" }}\n      >\n        {connections.map((line, i) => (\n          <line\n            x2={line.p2.x}\n            y2={line.p2.y}\n            x1={line.p1.x}\n            y1={line.p1.y}\n            stroke-width=\"1\"\n            stroke=\"black\"\n            key={i}\n          ></line>\n        ))}\n      </svg>\n      <input\n        type=\"number\"\n        value={base}\n        onChange={e => setBase(parseInt(e.target.value))}\n      />\n      <input\n        type=\"number\"\n        value={multiplier}\n        step=\".1\"\n        onChange={e => setMultiplier(parseFloat(e.target.value))}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}